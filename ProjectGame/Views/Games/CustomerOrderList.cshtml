@model IPagedList<OrderDetailViewModel>
@using ProjectGame.ViewModels
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Core.Fluent;


@{
    ViewData["Title"] = "Customer Order List";
    var name = ViewData["UserName"] as string;
}

<head>
    <link rel="stylesheet" href="~/css/styleStore.css" asp-append-version="true" />
</head>

<section>
    <div class="row">
        <!---------- Aside Sidebar ---------->
        @await Html.PartialAsync("_GameAside")

        <!---------- Main Content---------->
        <div class="col-md-9">
            <h2>@name's Order List</h2>

            <hr class="my-3" />

            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th style="width: 115px;">Order Date</th>
                        <th>Content</th>
                        <th style="width: 95px;">Total</th>
                        <th style="width: 90px;">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model)
                    {
                        <tr>
                            <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                            <td>
                                <ul class="mb-0">
                                    @foreach (var detail in order.Items)
                                    {
                                        <li>
                                            @detail.GameTitle x @detail.Quantity
                                            (Unit Price @detail.UnitPrice.ToString("C0"))
                                            Subtotal @($"{detail.Quantity * detail.UnitPrice:C0}")
                                        </li>
                                    }
                                </ul>
                            </td>
                            <td class="fw-bold">@order.Total.ToString("C0")</td>
                            <td>
                                @switch (order.Status)
                                {
                                    case OrderStatus.Paid:
                                        <span class="badge bg-success text-white" style="width: 85px;">Paid</span>
                                        break;
                                    case OrderStatus.Unpaid:
                                        <span class="badge bg-warning text-dark" style="width: 85px;">Unpaid</span>
                                        break;
                                    case OrderStatus.Shipped:
                                        <span class="badge bg-info text-dark" style="width: 85px;">Shipped</span>
                                        break;
                                    case OrderStatus.Cancelled:
                                        <span class="badge bg-danger text-white" style="width: 85px;">Cancelled</span>
                                        break;
                                    case OrderStatus.Completed:
                                        <span class="badge bg-primary text-white" style="width: 85px;">Completed</span>
                                        break;
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="mt-3 text-end">
                <a asp-action="CustomerInfo" asp-controller="Games" class="btn btn-outline-secondary">Back to List</a>
            </div>

            <!---------- Pagination ---------->
            <div class="d-flex flex-column align-items-center mt-4">
                 <div>
                    @Html.PagedListPager(
                        Model,
                        page => Url.Action("CustomerOrderList", new {
                            page,
                            name = name
                        }),
                        new PagedListRenderOptions
                        {
                            DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                            DisplayLinkToIndividualPages = true,
                            LinkToIndividualPageFormat = "{0}",
                            UlElementClasses = new[] { "pagination" },
                            LiElementClasses = new[] { "page-item" },
                            PageClasses = new[] { "page-link" }
                        })
                </div>
            </div>




        </div>
    </div>
</section>

